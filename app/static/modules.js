// Generated by LiveScript 1.5.0
(function(){
  var octavia, ref$, map, sortBy, average, avg, hide, el, out$ = typeof exports != 'undefined' && exports || this, join$ = [].join;
  out$.octavia = octavia = {
    modules: {},
    aliases: {},
    require: function(it){
      var that, ref$;
      while (that = this.aliases[it]) {
        it = that;
      }
      return typeof (ref$ = this.modules)[it] == 'function' ? ref$[it]() : void 8;
    },
    register: function(module, arg$){
      this.modules[module] = arg$;
    },
    alias: function(old, arg$){
      this.aliases[old] = arg$;
    }
  };
  ref$ = require('prelude-ls'), map = ref$.map, sortBy = ref$.sortBy, average = ref$.average;
  avg = function(it){
    if (!it) {
      return 0;
    }
    return average(it) || 0;
  };
  hide = function(it){
    return it.style.visibility = 'hidden';
  };
  el = function(tag){
    return document.createElement(tag);
  };
  octavia.register('login-form', function(){
    var shapes, selectedShapes, passwordField, passwordContainer, passwordShapes, unselectedShape, renderPassword, shapeSelector, i$, len$;
    shapes = ['square', 'circle', 'triangle'];
    selectedShapes = [];
    passwordField = document.querySelector('#input-password'), passwordContainer = passwordField.parentNode;
    passwordShapes = document.querySelector('.password-shapes');
    unselectedShape = function(idx){
      return function(){
        selectedShapes.splice(idx, 1);
        return renderPassword();
      };
    };
    renderPassword = function(){
      var i$, ref$, len$, results$ = [];
      passwordShapes.innerHTML = '';
      passwordField.value = join$.call(selectedShapes, ' ');
      for (i$ = 0, len$ = (ref$ = selectedShapes).length; i$ < len$; ++i$) {
        results$.push((fn$.call(this, i$, ref$[i$])));
      }
      return results$;
      function fn$(idx, passwordShape){
        var x$;
        x$ = el('span');
        x$.className = "shape shape-" + passwordShape;
        x$.onclick = unselectedShape(idx);
        passwordShapes.appendChild(x$);
        return x$;
      }
    };
    hide(passwordField);
    shapeSelector = document.querySelector('.shape-selector');
    for (i$ = 0, len$ = shapes.length; i$ < len$; ++i$) {
      (fn$.call(this, shapes[i$]));
    }
    function fn$(shape){
      var x$, shapeEl;
      console.log(shape);
      x$ = shapeEl = el('span');
      x$.className = "shape shape-" + shape;
      shapeEl.onclick = function(){
        selectedShapes.push(shape);
        renderPassword();
      };
      shapeSelector.appendChild(shapeEl);
    }
  });
  octavia.alias('student_login', 'login-form');
  octavia.alias('student_create', 'login-form');
  octavia.register('game_scores', function(){
    var users, res$, i$, x$, ref$, len$, scores, averages, ref1$, studentId, value, date, student, key$, username, values, data, average_data, this$ = this;
    res$ = {};
    for (i$ = 0, len$ = (ref$ = jsDataUsers).length; i$ < len$; ++i$) {
      x$ = ref$[i$];
      res$[x$.pk] = x$.fields;
    }
    users = res$;
    console.log(users);
    scores = {};
    averages = [];
    for (i$ = 0, len$ = (ref$ = jsDataScores).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$].fields, studentId = ref1$.student, value = ref1$.value, date = ref1$.date;
      student = users[studentId];
      (scores[key$ = student.username] || (scores[key$] = [])).push([new Date(date).valueOf(), value]);
    }
    for (username in scores) {
      values = scores[username];
      averages.push([username, avg(map(fn$, values))]);
    }
    res$ = [];
    for (username in scores) {
      values = scores[username];
      res$.push({
        name: username,
        data: sortBy(fn1$, values)
      });
    }
    data = res$;
    average_data = sortBy(function(it){
      return it[1];
    }, averages);
    console.log(JSON.stringify(data));
    console.log(JSON.stringify(average_data));
    Highcharts.chart('stats_base', {
      title: {
        text: 'Statistiques'
      },
      xAxis: {
        type: 'datetime'
      },
      yAxis: {
        title: {
          text: 'Score'
        }
      },
      series: data
    });
    Highcharts.chart('stats_avg', {
      chart: {
        type: 'column'
      },
      title: {
        text: 'Moyennes'
      },
      xAxis: {
        type: 'category'
      },
      series: [{
        name: 'Moyennes',
        data: average_data
      }]
    });
    function fn$(it){
      return it[1];
    }
    function fn1$(it){
      return it[0];
    }
  });
}).call(this);
