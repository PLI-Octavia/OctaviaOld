// Generated by LiveScript 1.5.0
var octavia, ref$, map, sortBy, average, avg, gEBI, hide, setTagAttr, L, out$ = typeof exports != 'undefined' && exports || this, toString$ = {}.toString;
out$.octavia = octavia = {
  modules: {},
  aliases: {},
  require: function(it){
    var that, ref$;
    while (that = this.aliases[it]) {
      it = that;
    }
    return typeof (ref$ = this.modules)[it] == 'function' ? ref$[it]() : void 8;
  },
  register: function(module, arg$){
    this.modules[module] = arg$;
  },
  alias: function(old, arg$){
    this.aliases[old] = arg$;
  }
};
ref$ = require('prelude-ls'), map = ref$.map, sortBy = ref$.sortBy, average = ref$.average;
avg = function(it){
  if (!it) {
    return 0;
  }
  return average(it) || 0;
};
out$.gEBI = gEBI = function(it){
  return document.getElementById(it);
};
hide = function(it){
  return it.style.visibility = 'hidden';
};
setTagAttr = function(el, k, v){
  var i$, x$, len$, results$ = [];
  switch (false) {
  case k !== 'content' && k !== 'text':
    return el.innerHTML = v;
  case k !== 'class':
    return el.classList.add(v);
  case k !== 'classes':
    for (i$ = 0, len$ = v.length; i$ < len$; ++i$) {
      x$ = v[i$];
      results$.push(el.classList.add(x$));
    }
    return results$;
    break;
  default:
    return el[k] = v;
  }
};
out$.L = L = function(tag, attrs){
  var ref$, x$, k, v;
  if (toString$.call(tag).slice(8, -1) === 'Object') {
    if (tag.tag) {
      attrs = tag;
      tag = tag.tag;
    } else {
      ref$ = [attrs, tag], tag = ref$[0], attrs = ref$[1];
    }
  }
  x$ = document.createElement(tag);
  for (k in attrs) {
    v = attrs[k];
    if (v != null) {
      setTagAttr(x$, k, v);
    }
  }
  return x$;
};